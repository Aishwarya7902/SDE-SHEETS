PROBLEM: https://leetcode.com/problems/permutations/


/*Solution 1: Recursive
tc: O(N!N) for each no we have to generate its pemutation ...hence N! and since there are N no(loop runs n times) hence tc will be O(N!*N)
sc: O(N) //for frequency array

pseudo code:
1.we are given a nums array ...we will declare a 2d vector of int ans which will store all
the permutations.

2.declare a vector of int (ds) to store current permutation

3.declare a map or frequency array and initialize it to zero and call recursion

4.base case:
when our curr vector's size is equal to size of nums .....push it in ans and return

5.we run a for loop starting from 0 to nums.size()-1
check the frequency of i is unmarked or not...if it is unmarked then it means it has not been picked yet....so we can pick it and make sure it is marked as picked.

6.call recursion to pick other elements

7.make sure to throw out the element from the ds vector when we come back from recursion and unmark the element from the map

‚ù§feel: hum for loop chalake element ko ds me dalenge only if it is not marked in
frequency array and then we will call recursion......and when we come back from recursion
humlog aisa behave karenge ki humne to kuch kiya hi ni...i.e we will throw out the
eleement from the ds and unmark it from frequeny array

8.at last return ans


‚ù§‚ù§‚ù§‚ù§‚ù§feel of this approach :har ek element ke liye ye kam karenge...pahle check karo ki frequency array me unmarked hai ki ni ...if yes....ds me push kar do ...
and ds ke jhole and freq ke jhole ke sath recursion ko call kar do next elements lane ke liye...jab sare recursive calls aa jaye wapas to tum khud ko freq array me
se unmark kar do and ds ke jhole me se khud ko nikal lo....isse sabko lagega ki tumne to kuch kiya hi niü§£üòâ

*/

class Solution {
public:
    void permuteHelper(vector<int>& nums,vector<vector<int>>&ans,vector<int>&ds,int freq[]){
        //base case
        if(ds.size()==nums.size())
        {
            ans.push_back(ds);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(!freq[i]){
                
                ds.push_back(nums[i]);
                freq[i]=1;
                permuteHelper(nums,ans,ds,freq);
                freq[i]=0;
                ds.pop_back();
                
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>ds;
        int freq[nums.size()];
        for(int i=0;i<nums.size();i++)
            freq[i]=0;
        permuteHelper(nums,ans,ds,freq);
        return ans;
        
                 
        
    }
};


/*
BACTRACING APPROACH
video(striver bhaiya):https://youtu.be/f2ic2Rsc9pU

TC:O(N X N!) here N! coz we are generating permutation and N coz we are running a loop
SC:O(1) we didn't use any extraa data structure except auxiliary space which is O(n) and O(n!) for storing all permutations in ans ....so we are saving a lot of space in this approach

tagline/feel ‚ù§‚ù§: 1st position pe array ke  har ek element ko try karo..and baki kam recursion ko de do i.e 2nd position pe har possibility ko check karne ki zimmedari hamari ni recursion ki hai....
similary for all rest position pe har ek possibility ko try karne ki zimmedri recursion kiüòâ
base case:when pointer==nums.size() ...push nums in ans‚úå

INTUTION BEHIND SWAPPING‚ú®‚ú®:
we are starting pointer from i=ind to i-nums.size()-1 and swapping so that every no  should be at a particular index.

PSEUDO CODE:
1.declare a vector of vector to store all the permutations
2.call helper function with index 0,nums and ans
3.base case...when index reaches size of nums..push it in ans and return
4.run a loop from 0 index to nums.size()-1 index....we are running loop so as to try out every 
possible element at a particular position
5.call recursion to try out every possibility at other positions starting from position+1
6.once u coma back from recursion make sure to reswap so as to try other possibility at that particular index....(this step is nothing but backtrackingüòé) 

*/



class Solution {
public:
    void swap(int &i,int &j){
        int temp=i;
        i=j;
        j=temp;
    }
    
    
    void helper(int ind,vector<int>& nums,vector<vector<int>>&ans){
        //base case ...if index becomes equal to nums.size it means we have reached a possible                 permutation  so we insert it in our ans.
        if(ind==nums.size()){
            ans.push_back(nums);
            return;
        }
        
        for(int i=ind;i<nums.size();i++){
            //try out every element at every particular position and swap that index  with that                     position
            swap(nums[ind],nums[i]);
            //call recursion to try every possibility all rest positions
            helper(ind+1,nums,ans);
             
            //backtrack
            
            swap(nums[ind],nums[i]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>ans;
        helper(0,nums,ans);
        return ans;
    }
};


